generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  clerkUserId String    @unique
  name        String?
  email       String    @unique
  role        Role      @default(MEMBER)
  teams       TeamUser[]
  assignedTasks UserTask[]  // Updated relation name
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Team {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     TeamUser[]
  projects    Project[]
  channels    Channel[]
}

model TeamUser {
  id      String @id @default(cuid())
  team    Team   @relation(fields: [teamId], references: [id])
  teamId  String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  role    Role   @default(MEMBER)
}

enum Role {
  ADMIN
  MEMBER
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      Status   @default(BACKLOG)
  priority    Priority @default(MEDIUM)
  dueDate     DateTime?
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  assignees   UserTask[]  // Relation to join table
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserTask {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  task   Task   @relation(fields: [taskId], references: [id])
  taskId String
}

enum Status {
  BACKLOG
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Channel {
  id        String   @id @default(cuid())
  name      String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}